---
title: "In-class_Ex03"
format: html
---

```{r}
pacman::p_load(sf, tmap, tidyverse, httr, dplyr, lubridate)
```

Importing the data

```{r}
folder_path <- "data/aspatial/acra"
file_list <- list.files(path = folder_path,
                        pattern = "^ACRA*.*\\.csv$",
                        full.names = TRUE)

acra_data <- file_list %>%
  map_dfr(read_csv)
```

Saving ACRA data

```{r}
write_rds(acra_data,
          "data/rds/acra_data.rds")
```

Tidying ACRA data

select the target businesses by using SSIC code

derive the year and month fields from registration_incorporation_date field

tidy postal code values to avoid 5 digit

We need to confirm the postal code for those that are 5 digits. is the 0 supposed to be at the front or the back? we can confirm based on the address (street name).

56111 refers to restaurants SSIC code

```{r}
biz_56111 <- acra_data%>%
  select(1:24) %>%
  filter(primary_ssic_code == 56111) %>%
  rename(date = registration_incorporation_date) %>%
  mutate(date = as.Date(date),
         YEAR = year(date),
         MONTH_NUM = month(date),
         MONTH_ABBR = month(date,
                            label = TRUE,
                            abbr = TRUE)) %>%
  mutate(
    postal_code = str_pad(postal_code,
    width = 6, side = "left", pad = "0")) %>%
            filter(YEAR == 2025)
```

Geocoding

Extracting unique postal code from the postal_code field

\*dont geocode too many. at max 5000 records\*

```{r}
postcodes <- unique(biz_56111$postal_code)

url <- "https://onemap.gov.sg/api/common/elastic/search"

found <- data.frame()
not_found <- data.frame(postcode = character())

for (pc in postcodes) {
  query <- list(
    searchVal = pc,
    returnGeom = "Y",
    getAddrDetails = "Y",
    pageNum = "1"
  )
  
  res <- GET(url, query = query)
  json <- content(res)
  
  if (json$found != 0) {
    df <- as.data.frame(json$results, stringAsFactors = FALSE)
    df$input_postcode <- pc
    found <- bind_rows(found, df)
  } else{
    not_found <- bind_rows(not_found, data.frame(postcode = pc))
  }
}
```

Appending the location information

```{r}
biz_56111 = biz_56111 %>%
  left_join(found,
            by = c('postal_code' = 'POSTAL'))
```

converting into SF data frame

```{r}
biz_56111_sf <- st_as_sf(biz_56111,
                         coords = c("X", "Y"),
                         crs=3414)
```

```{r}
glimpse(biz_56111_sf)
```
